bingaloo_1$production_level <- factor(bingaloo_1$production_level, levels = seq(0, 1,  by = 0.25))
bingaloo_1$storage_change <- factor(bingaloo_1$storage_change, levels = c(-0.1, 0, 0.1))
bingaloo_1 <- bingaloo_1 %>%
pivot_longer(cols = c('production_level', 'storage_change'))
graph_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = value) +
geom_tile() +
scale_fill_viridis_d() +
facet_grid(.~name) +
labs(fill = 'Production level', x = 'Current customer demand Y[t]', y = 'Current storage level')
graph_1
bingaloo_1 <- readRDS(file = 'model_1_policy.RDS')
bingaloo_2 <- readRDS(file = 'model_2_policy.RDS')
bingaloo_1$production_level <- factor(bingaloo_1$production_level, levels = seq(0, 1,  by = 0.25))
bingaloo_1$storage_change <- factor(bingaloo_1$storage_change, levels = c(-0.1, 0, 0.1))
bingaloo_2$production_level <- factor(bingaloo_2$production_level, levels = seq(0, 1,  by = 0.25))
bingaloo_2$storage_change <- factor(bingaloo_2$storage_change, levels = c(-0.1, 0, 0.1))
library(ggplot2)
ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = factor(production_level)) +
geom_tile() +
scale_fill_viridis_d()
ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d()
ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression('Current customer demand Y[t]'), y = 'Current storage level')
ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression("Current customer demand", Y[t]), y = 'Current storage level')
ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Current customer demand", Y[t])), y = 'Current storage level')
graph_opt_prod_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_storage_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = factor(storage_change)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Storage decision', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_prod_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = factor(production_level, levels = seq(0, 1, by = 0.25))) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
graph_opt_storage_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = factor(storage_change)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Storage decision', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
library(gridExtra)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
graph_opt_prod_2,
graph_opt_storage_2,
layout_matrix = matrix(c(1, 2, 3, 4), byrow = FALSE, ncol = 2))
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = (production_level, levels = seq(0, 1, by = 0.25))) +
geom_tile() +
scale_fill_viridis_d()
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d()
bingaloo_2$production_level
bingaloo_1 <- readRDS(file = 'model_1_policy.RDS')
bingaloo_2 <- readRDS(file = 'model_2_policy.RDS')
bingaloo_1$production_level <- factor(bingaloo_1$production_level, levels = seq(0, 1,  by = 0.25))
bingaloo_1$storage_change <- factor(bingaloo_1$storage_change, levels = c(-0.1, 0, 0.1))
bingaloo_2$production_level <- factor(bingaloo_2$production_level, levels = seq(0, 1,  by = 0.25))
bingaloo_2$storage_change <- factor(bingaloo_2$storage_change, levels = c(-0.1, 0, 0.1))
library(ggplot2)
graph_opt_prod_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_storage_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = factor(storage_change)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Storage decision', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_prod_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
graph_opt_storage_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = (storage_change)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Storage decision', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
library(gridExtra)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
graph_opt_prod_2,
graph_opt_storage_2,
layout_matrix = matrix(c(1, 2, 3, 4), byrow = FALSE, ncol = 2))
?scale_fill_viridis_d
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d(breaks = seq(0, 1, by = 0.25)) +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
# scale_fill_viridis_d(breaks = seq(0, 1, by = 0.25)) +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
bingaloo_2$production_level
ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
graph_opt_prod_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d() +
labs(fill = 'Production level', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_storage_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = factor(storage_change)) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
labs(fill = 'Storage decision', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_prod_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
graph_opt_storage_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = (storage_change)) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
labs(fill = 'Storage decision', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
library(gridExtra)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
graph_opt_prod_2,
graph_opt_storage_2,
layout_matrix = matrix(c(1, 2, 3, 4), byrow = FALSE, ncol = 2))
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
graph_opt_prod_2,
graph_opt_storage_2,
layout_matrix = matrix(c(1, 2, 3, 4), byrow = FALSE, ncol = 2), top = 'blabl')
graph_opt_prod_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = (production_level)) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
theme(legend.position = 'top') +
labs(fill = 'Production level', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_storage_1 <- ggplot(data = bingaloo_1) +
aes(x = demand, y = storage, fill = factor(storage_change)) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
theme(legend.position = 'top') +
labs(fill = 'Storage decision', x = expression(paste("Current customer demand ", Y[t])), y = 'Current storage level')
graph_opt_prod_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = production_level) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
theme(legend.position = 'top') +
labs(fill = 'Production level', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
graph_opt_storage_2 <- ggplot(data = bingaloo_2) +
aes(x = demand, y = storage, fill = (storage_change)) +
geom_tile() +
scale_fill_viridis_d(drop = FALSE) +
theme(legend.position = 'top') +
labs(fill = 'Storage decision', x = expression(paste("Prior customer demand ", Y[t-1])), y = 'Current storage level')
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
graph_opt_prod_2,
graph_opt_storage_2,
layout_matrix = matrix(c(1, 2, 3, 4), byrow = FALSE, ncol = 2),
top = 'blabl')
pdf(file = 'model_1_with_storage.pdf')
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
dev.off()
pdf(file = 'model_2_with_storage.pdf')
gridExtra::grid.arrange(graph_opt_prod_2,
graph_opt_storage_2,
nrow = 2, ncol = 1,
top = 'Model 2 computed from data')
dev.off()
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
pdf(file = 'model_1_with_storage.pdf')
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
dev.off()
pdf(file = 'model_2_with_storage.pdf')
gridExtra::grid.arrange(graph_opt_prod_2,
graph_opt_storage_2,
nrow = 2, ncol = 1,
top = 'Model 2 computed from data')
dev.off()
pdf(file = 'model_1_with_storage.pdf', height = '7', width = '3.5')
pdf(file = 'model_1_with_storage.pdf', height = 7, width = 3.5)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
dev.off()
pdf(file = 'model_1_with_storage.pdf', height = 7, width = 4)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
dev.off()
pdf(file = 'model_2_with_storage.pdf')
dev.off()
pdf(file = 'model_1_with_storage.pdf', height = 7, width = 4.5)
gridExtra::grid.arrange(graph_opt_prod_1,
graph_opt_storage_1,
nrow = 2, ncol = 1,
top = 'Model 1 computed from data')
dev.off()
pdf(file = 'model_2_with_storage.pdf', height = 7, width = 4.5)
gridExtra::grid.arrange(graph_opt_prod_2,
graph_opt_storage_2,
nrow = 2, ncol = 1,
top = 'Model 2 computed from data')
dev.off()
#
# rev(unique(bingaloo_1$demand))[1:10]
# rev(unique(bingaloo_2$demand))[1:10]
blabou <- readRDS(file = 'model_1_data_generated.RDS')
plot.ts(blabou)
plot.ts(blabou[1:100,])
plot.ts(blabou[1:30,])
# choose oracle (not) and load appropriate policy
model_oracle = TRUE
model_policy <- readRDS(file = 'model_1_policy.RDS')
#
set.seed(2852)
NN_TEST <- 1000
demand_sequence_TEST <- sim_ar_bis(n = NN_TEST + 1)
initial_storage_TEST <- c(runif(n = 1, min = MIN_STORAGE, max = MAX_STORAGE), rep(NA, NN_TEST - 1))
test_df <- data.frame(
'past_demand' = demand_sequence_TEST[- (NN_TEST + 1)],
'demand' = demand_sequence_TEST[- 1],
'storage' = initial_storage_TEST,
'decision_storage_change' = NA,
'decision_production_level' = NA,
"It" = NA,
"Pt" = NA,
"Storedt" = 0,
"Unstoredt" = 0,
"Supplyt" = NA,
"REWARD" = NA
)
my_fooo <- function(demand, storage, bingaloo){
valeur_plus_proche_demand <- bingaloo$demand[which.min(abs(bingaloo$demand - demand))]
valeur_plus_proche_storage <- bingaloo$storage[which.min(abs(bingaloo$storage - storage))]
indexx <- which( (abs(bingaloo$demand - valeur_plus_proche_demand) < 1e-10) & (abs(bingaloo$storage - valeur_plus_proche_storage) < 1e-10) )
c("storage_change" = bingaloo$storage_change[indexx],
"production_level" = bingaloo$production_level[indexx])
}
my_fooo(demand = 200, storage = 0, bingaloo = model_policy)
for(i in 1:NN_TEST){
# compute decision and store it in dataframe
if(model_oracle == TRUE){
my_decision <- my_fooo(demand = test_df$demand[i], storage = test_df$storage[i], bingaloo = model_policy)
}else{
my_decision <- my_fooo(demand = test_df$past_demand[i], storage = test_df$storage[i], bingaloo = model_policy)
}
test_df$decision_storage_change[i] <- my_decision['storage_change']
test_df$decision_production_level[i] <- my_decision['production_level']
# compute intermediaries
test_df$It[i] = pars$a * test_df$decision_production_level[i] + pars$b
test_df$Pt[i] <- pars$c * test_df$It[i]
if(test_df$decision_storage_change[i] > 0){
test_df$Storedt[i] <- test_df$decision_storage_change[i] * test_df$Pt[i]
}else{
test_df$Unstoredt[i] <- (- test_df$decision_storage_change[i]) * test_df$storage[i]
}
test_df$Supplyt[i] <- test_df$Pt[i] - test_df$Storedt[i] + test_df$Unstoredt[i]
# compute reward
test_df$REWARD[i] <- pars$d * test_df$It[i] +
pars$e * pmax(test_df$demand[i] - test_df$Supplyt[i], 0) -
pars$f * pmin(test_df$demand[i], test_df$Supplyt[i])
# compute next storage value
if(i < NN_TEST){
test_df$storage[i+1] <- test_df$storage[i] + test_df$Storedt[i] - test_df$Unstoredt[i]
}
}
summary(test_df$REWARD)
plot.ts(test_df)
plot.ts(test_df[1:10,])
plot.ts(test_df[,1:10])
colnames(test_df)
1:10
plot.ts(test_df[,c(2, 3, 4, 5, 7, 8, 9, 10)])
plot.ts(test_df[1:100,c(2, 3, 4, 5, 7, 8, 9, 10)])
plot.ts(test_df[1:40,c(2, 3, 4, 5, 7, 8, 9, 10)])
plot.ts(test_df[20 + 1:40,c(2, 3, 4, 5, 7, 8, 9, 10)], type = 'o', pch = 20)
plot.ts(test_df[20 + 1:40,c(2, 3, 4, 5, 7, 8, 9, 10)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
pdf(file = 'illustration_time_series_system.pdf')
plot.ts(test_df[20 + 1:40,c(2, 3, 4, 5, 7, 8, 9, 10)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
dev.off()
plot.ts(test_df[20 + 1:40,c(2, 3, 4, 5, 7, 8, 9, 10)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
plot.ts(test_df[20 + 1:40, c(2, 3, 4, 5, 7, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
library(ggplot2)
test_df$time <- 1:nrow(test_df)
ggplot(data = test_df[20 + 1:40,]) +
geom_line(mapping = aes(x = time, y = demand, col = 'demand')) +
geom_line(mapping = aes(x = time, y = Supplyt, col = 'Supplyt'))
ggplot(data = test_df[20 + 1:40,]) +
aes(x = time, y = demand, col = 'demand') +
geom_line(lwd = 2) + geom_point(pch = 20) +
geom_line(mapping = aes(x = time, y = Supplyt, col = 'Supplyt'))
ggplot(data = test_df[20 + 1:40,]) +
aes(x = time, y = demand, col = 'demand') +
geom_line(lwd = 1.25) + geom_point(pch = 20) +
geom_line(mapping = aes(x = time, y = Supplyt, col = 'Supplyt'))
ggplot(data = test_df[20 + 1:40,]) +
aes(x = time, y = demand, col = 'demand') +
geom_line(lwd = 1.25) + geom_point(pch = 20, cex = 2) +
geom_line(mapping = aes(x = time, y = Supplyt, col = 'Supplyt'))
ggplot(data = test_df[20 + 1:40,]) +
aes(x = time, y = demand, col = 'demand') +
geom_line(lwd = 1) + geom_point(pch = 20, cex = 2) +
geom_line(mapping = aes(x = time, y = Supplyt, col = 'Supplyt'))
ggplot(data = test_df[20 + 1:40,]) +
aes(x = time, y = demand, col = 'demand') +
geom_line(lwd = 1) + geom_point(pch = 20, cex = 2) +
aes(x = time, y = Supplyt, col = 'Supplyt') +
geom_line(lwd = 1) + geom_point(pch = 20, cex = 2)
geom_line_and_point <- function(...){
geom_line(...) +
geom_point(...)
}
ggplot(data = test_df[20 + 1:40,]) +
geom_line_and_point(aes(x = time, y = demand, col = 'demand'), lwd = 1, pch = 20, cex = 2)
geom_line_and_point <- function(h){
geom_line(h) +
geom_point(h)
}
ggplot(data = test_df[20 + 1:40,]) +
geom_line_and_point(aes(x = time, y = demand, col = 'demand'), lwd = 1, pch = 20, cex = 2)
ggplot(data = test_df[20 + 1:40,]) +
geom_line_and_point(list(aes(x = time, y = demand, col = 'demand'), lwd = 1, pch = 20, cex = 2))
ggplot(data = test_df[20 + 1:40,]) +
geom_line(aes(x = time, y = demand, col = 'demand'), lwd = 1, pch = 20, cex = 2) +
aes(x = time, y = Supplyt, col = 'Supplyt') +
geom_line(lwd = 1) + geom_point(pch = 20, cex = 2)
ggplot(data = test_df[20 + 1:40,]) +
geom_line(aes(x = time, y = REWARD, col = 'REWARD'), lwd = 1, pch = 20, cex = 2)
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
pdf(file = 'illustration_time_series_system.pdf')
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 with perfect information')
dev.off()
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 \n with perfect information')
pdf(file = 'illustration_time_series_system.pdf')
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 \n with perfect information')
dev.off()
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = '\n Illustrative example of the system following model 1 \n with perfect information')
pdf(file = 'illustration_time_series_system.pdf')
plot.ts(test_df[20 + 1:40, c(2, 3, 8, 9, 10, 11)], type = 'o', pch = 20, main = 'Illustrative example of the system following model 1 \n with perfect information')
dev.off()
# on se fait un graphique pour trois loss function, moyenne,
# quantile 75, huber loss
n <- 500
x <- runif(n = n, min = -10, max = +10)
y <- outer(x, c(1:10), "^") %*% (runif(n = 10, min = -5, max = +5)/c(10^(1:10)))
plot(x,y)
y_w_noise <- y + rnorm(n = n, mean = 0, sd = sd(y)/2)
plot(x,y_w_noise)
loss_1 <- function(y, yhat, take.mean = TRUE){
v <- (y-yhat)^2
if(take.mean) return(mean(v))
return(v)
}
loss_2 <- function(y, yhat, take.mean = TRUE){
quant <- 1 - 0.25
v <- pmax( quant * (yhat - y), (quant - 1) * (yhat - y))
if(take.mean) return(mean(v))
return(v)
}
loss_3 <- function(y, yhat, take.mean = TRUE){
v <- ( pmax(y-yhat, 0) * (y > 0) +
( pmax(yhat-y, 0) * (y <= 0) ) )
if(take.mean) return(mean(v))
return(v)
}
seq_x <- seq(from = -10, to = +10, length.out = 20)
pred_y <- array(data = NA, dim = c(length(seq_x), 3))
for(i in 1:length(seq_x)){
xi <- seq_x[i]
cond <- abs(x - xi) < (seq_x[2]-seq_x[1])
ypotential <- seq(from = -0.5 + min(y_w_noise[cond]), to = 0.5 + max(y_w_noise[cond]), length.out = 25)
respotential <- sapply(ypotential, function(yh){
cbind(
loss_1(y = y_w_noise[cond], yhat = yh),
loss_2(y = y_w_noise[cond], yhat = yh),
loss_3(y = y_w_noise[cond], yhat = yh)
)
})
respotential <- t(respotential)
pred_y[i,] <- ypotential[apply(respotential, 2, which.min)]
}
plot(x, y_w_noise)
lines(x = seq_x, y = pred_y[,1], col = 'blue')
lines(x = seq_x, y = pred_y[,2], col = 'red')
lines(x = seq_x, y = pred_y[,3], col = 'orange')
library(ggplot2)
ggplot(data = NULL) +
geom_point(aes(x = x, y = y_w_noise, fill = 'Data point'), alpha = 0.3) +
geom_line(aes(x = seq_x, y = pred_y[,1], col = 'Mean Squared Error (Average)')) +
geom_line(aes(x = seq_x, y = pred_y[,2], col = 'Asymetric Absolute Value Error (0.25 Quantile)')) +
geom_line(aes(x = seq_x, y = pred_y[,3], col = 'Y-dependent Error')) +
ggtitle('Predictor of Y|X for different losses') + xlab('X') + ylab('Y') +
labs(col = 'Loss used', fill = '') +
guides(col = guide_legend(nrow = 3, byrow = TRUE)) +
theme(legend.position = 'top',
axis.title.y = element_text(angle = 0, vjust = 1/2))
error_grid <- expand.grid(
"y" = seq(from = -5, to = +5, length.out = 100),
"yhat" = seq(from = -5, to = +5, length.out = 100)
)
error_grid$l1 <- loss_1(y = error_grid$y, yhat = error_grid$yhat, take.mean = FALSE)
error_grid$l2 <- loss_2(y = error_grid$y, yhat = error_grid$yhat, take.mean = FALSE)
error_grid$l3 <- loss_3(y = error_grid$y, yhat = error_grid$yhat, take.mean = FALSE)
error_grid$l1 <- error_grid$l1 / max(error_grid$l1)
error_grid$l2 <- error_grid$l2 / max(error_grid$l2)
error_grid$l3 <- error_grid$l3 / max(error_grid$l3)
library(tidyverse)
error_grid <- error_grid %>% pivot_longer(cols = c('l1', 'l2', 'l3'), names_to = 'loss', values_to = 'value')
str(error_grid)
error_grid$loss_factor <- factor(error_grid$loss, levels = c('l1', 'l2', 'l3'), labels = c('Mean Squared Error (Average)', 'Asymetric Absolute Value Error \n (0.25 Quantile)', 'Y-dependent Error'))
error_grid$yhat_is_optimal <- FALSE
yseq <- unique(error_grid$y)
for(i in 1:length(yseq)){
for(j in 1:length(levels(error_grid$loss_factor))){
cond <- error_grid$y==yseq[i] & error_grid$loss_factor==levels(error_grid$loss_factor)[j]
error_grid$yhat_is_optimal[cond][which.min(error_grid$value[cond])] <- TRUE
}
}
sum(error_grid$yhat_is_optimal)
ggplot(data = error_grid) +
aes(x = y, y = yhat, fill = value) +
geom_tile() +
scale_fill_viridis_c() +
# geom_point(data = error_grid[error_grid$yhat_is_optimal,],
#           mapping = aes(col = 'red')) +
facet_wrap(~loss_factor) +
ggtitle(expression(paste('Loss functions depending on couple (', hat(Y), ',', Y, ')'))) + xlab("Y") + ylab(expression(hat(Y))) +
labs(col = 'Loss used', fill = 'Loss value, normalized by max value on grid') +
theme(legend.position = 'top',
axis.title.y = element_text(angle = 0, vjust = 1/2))
ggplot(data = error_grid) +
aes(x = y, y = yhat, fill = value) +
geom_tile() +
scale_fill_viridis_c() +
# geom_point(data = error_grid[error_grid$yhat_is_optimal,],
#           mapping = aes(col = 'red')) +
facet_wrap(.~loss_factor) +
ggtitle(expression(paste('Loss functions depending on couple (', hat(Y), ',', Y, ')'))) + xlab("Y") + ylab(expression(hat(Y))) +
labs(col = 'Loss used', fill = 'Loss value, normalized by max value on grid') +
theme(legend.position = 'top',
axis.title.y = element_text(angle = 0, vjust = 1/2))
ggplot(data = error_grid) +
aes(x = y, y = yhat, fill = value) +
geom_tile() +
scale_fill_viridis_c() +
# geom_point(data = error_grid[error_grid$yhat_is_optimal,],
#           mapping = aes(col = 'red')) +
facet_grid(.~loss_factor, nrow = 2) +
ggtitle(expression(paste('Loss functions depending on couple (', hat(Y), ',', Y, ')'))) + xlab("Y") + ylab(expression(hat(Y))) +
labs(col = 'Loss used', fill = 'Loss value, normalized by max value on grid') +
theme(legend.position = 'top',
axis.title.y = element_text(angle = 0, vjust = 1/2))
ggplot(data = error_grid) +
aes(x = y, y = yhat, fill = value) +
geom_tile() +
scale_fill_viridis_c() +
# geom_point(data = error_grid[error_grid$yhat_is_optimal,],
#           mapping = aes(col = 'red')) +
facet_wrap(.~loss_factor, nrow = 2) +
ggtitle(expression(paste('Loss functions depending on couple (', hat(Y), ',', Y, ')'))) + xlab("Y") + ylab(expression(hat(Y))) +
labs(col = 'Loss used', fill = 'Loss value, normalized by max value on grid') +
theme(legend.position = 'top',
axis.title.y = element_text(angle = 0, vjust = 1/2))
